# ----figure 2----
# economic losses by threshold
# reset pars
p_ff.0 = 0.7; p_ll.0 = p_ff.0; p_fl.0 = 1-p_ff.0; p_lf.0 = p_fl.0; F_w.0 = 25*F_f.0; t_s.0 = 0.95; t_r.0 = t_s.0*0.25; l_s.0 = 6.35; l_r.0 = l_s.0*0.9

# set up & make function
{tr.vec <- seq(from = 0.2, to = 0.9, length.out = 5) # treatment effect --> might be interesting to also do with wild fish to see how threshold & wild fish interact
  th.vec <- seq(from = 0.01, to = 18, length.out = 18) # threshold
  lossesF1_mat <- matrix(NA, nrow = length(th.vec), ncol = length(tr.vec))
  
  econ <- function() {
    for (i in 1:length(tr.vec)) {
      
      t_s.0 = tr.vec[i]
      t_r.0 = t_s.0*0.25 # make 25% of t_s
      
      for (j in 1:length(th.vec)) {
        
        th.0 = th.vec[j]
        
        rootfunc <- function(Time, y, Pars) {return (y[1] + y[2] - th.0*F_f.0)} # threshold hit
        eventfunc <- function(Time, y, Pars) {
          y[1] <- (1-t_r.0)*y[1]
          y[2] <- (1-t_s.0)*y[2]
          return(y)
        } # at the root, do this event
        
        Pars = c(l_s = l_s.0, c_s = c_s.0, l_r = l_r.0, c_r = c_r.0, 
                 u_s = u_s.0, u_r = u_r.0, m = m.0, mb = mb.0,
                 p_ff = p_ff.0, p_ll = p_ll.0, p_fl = p_fl.0, p_lf = p_lf.0, p_ww = p_ww.0, 
                 B_f = B_f.0, B_l = B_l.0, B_w = B_w.0,
                 Tr = Tr.0, t_r = t_r.0, t_s = t_s.0, b = b.0, th = th.0, h = h.0,
                 F_f = F_f.0, F_w = F_w.0, 
                 r = r.0, v = v.0, X = X.0, Y = Y.0, u_f = u_f.0, sig = sig.0,
                 M_out = M_out.0, M_in = M_in.0)
        
        State = c(L_rF = 0, L_sF = 0.001, L_rL = 0, L_sL = 0, F_l = r.0, L_rW = 0, L_sW = F_w.0)
        out <- ode(Time, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE))
        # then take output from out and use to start new simulation state
        State = out[dim(out)[1], 2:8]; State["L_sF"] = State["L_sF"]-0.001; State["L_rF"] = 0.001 # can just replace a suseptable louse with a resistant louse
        out <- ode(Time, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE, maxroot = 6000))
        
        out_df <- as.data.frame(out)
        # out_df2 <- out_df %>% filter(time > (n/2)-30)
        # out_df$lpff <- (out_df$L_rF + out_df$L_sF)/F_f.0
        # out_df$grow <- (out_df$lpff - lag(out_df$lpff)) >= 0
        # treat_apply <- ifelse(out_df$grow == TRUE, 0, 1)
        treat_time <- attributes(out)$troot
        # treat_apply <- sum(treat_time > (n/2)-30, na.rm = TRUE)
        treat_apply <- length(attributes(out)$troot)
        
        # matrix updates --> grab last ten time steps to average over
        # treat_mat[j, i] <- sum(treat_apply, na.rm = TRUE)
        lossesF1_mat[j, i] <- pT*F_f.0*treat_apply + sum(pQ*(out_df$L_rF + out_df$L_sF)) # pT*F_f.0*treat_mat[j, i] + sum(pQ*out_df$lpff) # number of times you applied treatment plus some cost per lice
        
      }
    }
    
    FLM <- melt(lossesF1_mat)
    for (i in 1:dim(FLM)[1]) {
      FLM$Treat_Int[i] <- tr.vec[FLM$Var2[i]] # need to rename based on vectors
      FLM$Threshold[i] <- th.vec[FLM$Var1[i]] # need to rename based on vectors
    }
    
    return(FLM)
    
  }}

# run across parameters
{pQ = 0.002; pT = 30*pQ
  HTC <- econ()
  pQ = 0.002; pT = 15*pQ
  LTC <- econ()}

# make economic value standardized
{stand_val <- max(HTC$value, LTC$value)
  HTC$econ <- HTC$value/stand_val
  LTC$econ <- LTC$value/stand_val
}

# make subplots
{HTC_g <- ggplot(HTC, aes(Threshold, econ, color = Treat_Int)) + geom_hline(yintercept = HTC$econ[which(HTC$Threshold == 18)[1]], col = "darkgray", linetype=2) + geom_point(size = 1.8) + theme_bw() + scale_x_continuous(name = "Threshold") + scale_y_continuous(name = "Economic Losses (Standardized)", limits = c(0, 1)) +  scale_color_viridis(option = "D", direction = -1, name = "Treatment \nEfficacy", limits = c(0.2, 0.95)) 
  LTC_g <- ggplot(NULL, aes(LTC$Threshold, LTC$econ, color = LTC$Treat_Int)) + geom_hline(yintercept = LTC$econ[which(HTC$Threshold == 18)[1]], col = "darkgray", linetype=2) + geom_point(size = 1.8, show.legend = F) + theme_bw() + scale_x_continuous("Threshold") + scale_y_continuous(name = NULL, limits = c(0, 1)) + scale_color_viridis(option = "D", direction = -1)}

# final plot
lgnd_econ <- get_legend(
  HTC_g + theme(legend.box.margin = margin(0, 0, 100, 6))
)

tmp_econ <- plot_grid(HTC_g+theme(legend.position="none"), 
                      LTC_g,
                      ncol = 2)

fig4 <- plot_grid(tmp_econ, lgnd_econ, ncol = 2, rel_widths = c(3, .55))
fig4
png("plots/resistance_fig4.png",height=85,width=170,res=400,units='mm')
print(fig4)
dev.off()
