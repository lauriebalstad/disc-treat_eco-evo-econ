---
title: "lice resistance evolution"
author: "Laurie Balstad"
date: "2023-01-22"
output: html_document
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(matlib)
library(sparsevar) 
library(randomForest)
library(lhs)
library(reshape2)
library(ggplot2)
library(RColorBrewer)

```

first, the ODE system

```{r ODE system}

systemS <- function (Time, State, Pars) {
    with(as.list(c(State, Pars)), {
       
        # domestic parasites
        dL_rF = l_r/c_r*F_f*B_f*(p_ff*L_rF + p_fl*(M_out*F_l*L_rW)/((F_w+M_out*F_l/M_in)*(u_r + sig))) - (u_r+h)*L_rF - t_r*Tr/(1 + exp(-b*((L_rF+L_sF)/F_f - th)))*L_rF - m*L_rF*(L_rF+L_sF)/F_f # no resistant subsidy
        dL_sF = l_s/c_s*F_f*(p_ff*L_sF + p_fl*(M_out*F_l*L_sW)/((F_w+M_out*F_l/M_in)*(u_s + sig))) - (u_s+h)*L_sF - t_s*Tr/(1 + exp(-b*((L_rF+L_sF)/F_f - th)))*L_sF - m*L_sF*(L_rF+L_sF)/F_f
        
        # domesitc hosts in equilibirum
      
        # link parasites
        dL_rL = l_r/c_r*F_l*B_l*(p_ll*L_rL + p_lf*L_rF) - (u_r+Y+M_out)*L_rL - m*L_rL*(L_rL+L_sL)/F_l 
        dL_sL = l_s/c_s*F_l*B_l*(p_ll*L_sL + p_lf*L_sF) - (u_s+Y+M_out)*L_sL - m*L_sL*(L_rL+L_sL)/F_l
        
        # link hosts
        dF_l = r*F_l/(v+F_l) - X*(L_rL + L_sL) - Y*F_l - M_out*F_l # hosts leave by maturing
        
        # wild subsidy
        dL_rW = l_r/c_r*B_w*(F_w + (M_out*F_l/M_in))*p_ww*L_rW + M_out*L_rL - (u_r+u_f)*L_rW - M_out*F_l*L_rW/(F_w + (M_out*F_l/M_in)) - m*L_rW*(L_rW+L_sW)/(F_w + (M_out*F_l/M_in))
        dL_sW = l_s/c_s*B_w*(F_w + (M_out*F_l/M_in))*p_ww*L_sW + M_out*L_sL - (u_s+u_f)*L_sW - M_out*F_l*L_sW/(F_w + (M_out*F_l/M_in)) - m*L_sW*(L_rW+L_sW)/(F_w + (M_out*F_l/M_in))
        
        # wild hosts, spawning hosts & spawning parasites in equilbiribum
        
        derivs = c(dL_rF, dL_sF,
            dL_rL,dL_sL, dF_l, 
            dL_rW, dL_sW)
        
        derivs[!is.finite(derivs)] = 0
        
        return(list(derivs))
    })
}

```

next, default parameters

```{r parameters}

l_s.0 = 1; c_s.0 = 1
# l_r.0 = 1; c_r.0 = 1
l_r.0 = 0.9; c_r.0 = 1 # similar to Murray values
u_s.0 = .1
u_r.0 = .1 # Bateman et al modifies resistant lice here
m.0 = 1

p_ff.0 = 0.95 # low connectivity case (p_ff.0 close to 1)
p_ll.0 = p_ff.0 # lice in farm stay on farm...
p_fl.0 = 1-p_ff.0 # ...or jump to wild (spillover)
p_lf.0 = p_fl.0 # spillback rate
p_ww.0 = 1 # all lice in wild stay in that environment
B_f.0 = 1 # all the lice attach type vibe
B_l.0 = 0.5 # slightly lower in the link population -- bateman vibe
B_w.0 = 0.1 # lowest in wild

Tr.0 = 3
t_r.0 = 0.5 # similar to Murray
t_s.0 = 1
b.0 = 1000
th.0 = 0.01 # Murray/Bateman: continous treatment
h.0 = 0.1

F_f.0 = 1 # normalize farm fish population size
F_w.0 = 3
r.0 = 1
v.0 = 1
X.0 = 0.25
Y.0 = 0.25
u_f.0 = 0.25
M_out.0 = 0.2
M_in.0 = 0.1
sig.0 = 0.5

```

run ODE model
gut check: 
--> Tr.0 = 3; F_w.0 = 3; F_f.0 = 1; th.0 = 0.01 keeps resistant lice at bay
--> Tr.0 = 1; F_w.0 = 1; F_f.0 = 1; th.0 = 0.2 allows resistant lice
--> and, F_l not super influenced by number of wild fish now. but wild parasite burden is through the roof if p_ww.0 is "high"

```{r run ODE}

State = c(L_rF = 0.1, L_sF = 0, 
    L_rL = 0, L_sL = 0, F_l = 1,
    L_rW = 0, L_sW = 0.2) 

n = 300 # number of simulations -- seems to get to some version of equilibrium
Time = seq(0, n, length.out = 10*n)
mxn = max(Time)

#set parameters to default values
Pars = c(l_s = l_s.0, c_s = c_s.0, l_r = l_r.0, c_r = c_r.0, 
         u_s = u_s.0, u_r = u_r.0, m = m.0,
         p_ff = p_ff.0, p_ll = p_ll.0, p_fl = p_fl.0, p_lf = p_lf.0, p_ww = p_ww.0, 
         B_f = B_f.0, B_l = B_l.0, B_w = B_w.0,
         Tr = Tr.0, t_r = t_r.0, t_s = t_s.0, b = b.0, th = th.0, h = h.0,
         F_f = F_f.0, F_w = F_w.0, 
         r = r.0, v = v.0, X = X.0, Y = Y.0, u_f = u_f.0, sig = sig.0,
         M_out = M_out.0, M_in = M_in.0)

out <- ode(State, Time, func = systemS, Pars,method='lsoda')

```

heatmaps

```{r tracking wild parasites heatmaps}

# set up
tr.vec <- seq(from = 0, to = 5, length.out = 32) # treatment
th.vec <- seq(from = 0, to = 0.6, length.out = 30) # wild fish
Fprop_mat <- matrix(NA, nrow = length(th.vec), ncol = length(tr.vec))
Flice_mat <- matrix(NA, nrow = length(th.vec), ncol = length(tr.vec))
Wfish_mat <- matrix(NA, nrow = length(th.vec), ncol = length(tr.vec))
profitF_mat <- matrix(NA, nrow = length(th.vec), ncol = length(tr.vec))
Wlice_mat <- matrix(NA, nrow = length(th.vec), ncol = length(tr.vec))
n = 300 # number of simulations
Time = seq(0, n, length.out = 10*n)
t = length(Time) 

# economic values
pT <- 0.02 # per capita cost of treatment
pQ <- 0.01 # per capita loss due to parasite burden
pF <- 4 # per capita cost of fish (sale price)

# use concept of starting with no resistant lice
Events = data.frame(var = c("L_rF"), time = c(Time[10*n/2+1]), value = 0.01, method = c("add"))

for (i in 1:length(tr.vec)) {
  for (j in 1:length(th.vec)) {

    # if doing connectivity, vectors start at 1 and go to 0.01
    # p_ff.0 = tr.vec[i] # low connectivity case (p_ff.0 close to 1) = refuge effect
    # p_ll.0 = p_ff.0
    # p_fl.0 = 1-p_ff.0
    # p_lf.0 = p_fl.0
    
    # iterate
    Tr.0 = tr.vec[i]
    th.0 = th.vec[j]

    Pars = c(l_s = l_s.0, c_s = c_s.0, l_r = l_r.0, c_r = c_r.0, 
         u_s = u_s.0, u_r = u_r.0, m = m.0,
         p_ff = p_ff.0, p_ll = p_ll.0, p_fl = p_fl.0, p_lf = p_lf.0, p_ww = p_ww.0, 
         B_f = B_f.0, B_l = B_l.0, B_w = B_w.0,
         Tr = Tr.0, t_r = t_r.0, t_s = t_s.0, b = b.0, th = th.0, h = h.0,
         F_f = F_f.0, F_w = F_w.0, 
         r = r.0, v = v.0, X = X.0, Y = Y.0, u_f = u_f.0, sig = sig.0,
         M_out = M_out.0, M_in = M_in.0)
    
    # start with lice in the wild only
    State = c(L_rF = 0, L_sF = 0, L_rL = 0, L_sL = 0, F_l = 1, L_rW = 0, L_sW = 0.2) 
    
    out <- ode(State, Time, func = systemS, Pars, method='lsoda', events = list(data = Events))
    
    # econoimcs
    out_df <- as.data.frame(out[(t/2):t, ]) # only after resistant lice introduced
    # was treatment applied?
    out_df$treat_applied <- ifelse(out_df$L_rF + out_df$L_sF > th.0, 1, 0)
    # calc economic value
    out_df$profF <- exp(-0.05*out_df$time)*(pF*h.0*F_f.0 - out_df$treat_applied*pT*F_f.0*Tr.0 - pQ*(out_df$L_rF + out_df$L_sF))
    
    # matrix updates
    Fprop_mat[j, i] <- out[t, 2]/(out[t, 2] + out[t, 3])
    Flice_mat[j, i] <- (out[t, 2] + out[t, 3])/F_f.0
    Wfish_mat[j, i] <- out[t, 6]
    profitF_mat[j, i] <- sum(out_df$profF) # economic profits -- only farm
    Wlice_mat[j, i] <- (out[t, 7] + out[t, 8])/F_w.0

  }
}

# for connectivbity, add 1:1 line
# heatmap(Fprop_mat, Colv = NA, Rowv = NA, scale = "none", add.expr = abline(0, 1))
heatmap(Fprop_mat, Colv = NA, Rowv = NA, scale = "none")
range(Fprop_mat)
heatmap(Flice_mat, Colv = NA, Rowv = NA, scale = "none")
range(Flice_mat)
heatmap(Wfish_mat, Colv = NA, Rowv = NA, scale = "none")
range(Wfish_mat)
heatmap(profitF_mat, Colv = NA, Rowv = NA, scale = "none")
range(profitF_mat)
heatmap(Wlice_mat, Colv = NA, Rowv = NA, scale = "none")
range(Wlice_mat)

```

in ggplot

```{r better plotting?}

FPM <- melt(Fprop_mat)
for (i in 1:dim(FPM)[1]) {
  FPM$Treat_Int[i] <- tr.vec[FPM$Var2[i]] # need to rename based on vectors
  FPM$Wild_Ratio[i] <- th.vec[FPM$Var1[i]] # need to rename based on vectors
}

ggplot(FPM, aes(x = Treat_Int, y = Wild_Ratio)) + geom_tile(aes(fill = value)) + scale_fill_distiller(palette = "YlOrRd", direction = 1, na.value="white", limits=c(0, 1)) + theme_bw() # Spectral

```

gsa example (UPDATE from past example)
