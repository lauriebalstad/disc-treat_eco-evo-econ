link_pop <- mean(out_last_month$F_l)
list(resist_percent, link_pop, num_treats, farm_burd)
}}
# end parallel cluster
stopCluster(cl)
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.2*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 # has
l_s.0 = 6.35; c_s.0 = 1/5
l_r.0 = l_s.0*0.9; c_r.0 = c_s.0 # similar to Murray values: l_s.0*0.98
u_s.0 = 1/60
u_r.0 = u_s.0 # Bateman et al modifies resistant lice here
m.0 = 0.0025 # to modify equilibrium values, basically the competition
mb.0 = 0.01 # 1?? 0.2?? m.0?
p_ff.0 = 0.9 # low-ish connectivity case (p_ff.0 close to 1)
p_ll.0 = p_ff.0 # lice in farm stay on farm...
p_fl.0 = 1-p_ff.0 # ...or jump to wild (spillover)
p_lf.0 = p_fl.0 # spillback rate
p_ww.0 = 1 # all lice in wild stay in that environment, movement to link environment via migration
B_f.0 = 5.9*10^-10/1.3 # all the lice attach type vibe -- very approximate
B_l.0 = B_f.0*0.75 # slightly lower in the link population -- bateman vibe
B_w.0 = B_f.0*0.25 # lowest in wild
Tr.0 = 10 # just to start
t_s.0 = 0.9 # 90% effective
t_r.0 = t_s.0*0.5 # resistant lice have 75% advantage
b.0 = 1000
th.0 = 0 # Murray/Bateman: continous treatment
h.0 = 0.67/365
F_f.0 = 6*10^6 # normalize farm fish population size --> might need to be closer to 2e6?? for about a single farm v. whole network
F_w.0 = 20*F_f.0
r.0 = 3*10^2
v.0 = 2*10^2
X.0 = 0.02
u_f.0 = 0 # no wild fish death
M_out.0 = 1/(0.25*365)
Y.0 = M_out.0
M_in.0 = 1/(1.25*365)
sig.0 = 1/(0.25*365)
pT.0 = 10
pQ.0 = 2
n = 365*5 # for daily pars --> 10 years
Time = seq(0, n, length.out = n+1)
approx_pars = c(l_s = l_s.0, c_s = c_s.0, l_r = l_r.0, c_r = c_r.0,
u_s = u_s.0, u_r = u_r.0, m = m.0, mb = mb.0,
p_ff = p_ff.0, p_ll = p_ll.0, p_fl = p_fl.0, p_lf = p_lf.0, p_ww = p_ww.0,
B_f = B_f.0, B_l = B_l.0, B_w = B_w.0,
t_r = t_r.0, t_s = t_s.0, th = th.0, h = h.0,
F_f = F_f.0, F_w = F_w.0,
r = r.0, v = v.0, X = X.0, Y = Y.0, u_f = u_f.0, sig = sig.0,
M_out = M_out.0, M_in = M_in.0)
# doing parallel
cl <- parallel::makeCluster(detectCores())
doParallel::registerDoParallel(cl)
# set up & make function
{tr.vec <- seq(from = 0.3, to = 0.9, length.out = 4) # treatment effect --> might be interesting to also do with wild fish to see how threshold & wild fish interact
th.vec <- seq(from = 0.01, to = 26.01, length.out = 14) # threshold
TR_TH <- expand.grid(treat_eff = tr.vec, thresh_val = th.vec)
# think about how to prep the foreach loop --> check how you did it in the evo rescue files?
approx_pars_out <- foreach(i=1:dim(TR_TH)[1], .packages="deSolve", .combine="rbind") %dopar% {
t_s.0 = TR_TH$treat_eff[i]
t_r.0 = t_s.0*0.25 # make 25% of t_s
Pars = approx_pars
Pars['t_s'] <- t_s.0; Pars['t_r'] <- t_r.0
th.0 = TR_TH$thresh_val[i]
# redefine root & event with correct threshold and effecitivity
rootfunc <- function(Time, y, Pars) {return (y[1] + y[2] - th.0*F_f.0)} # threshold hit
eventfunc <- function(Time, y, Pars) {
y[1] <- (1-t_r.0)*y[1]
y[2] <- (1-t_s.0)*y[2]
return(y)
} # at the root, do this event
State = c(L_rF = 0, L_sF = 0.0005*F_f.0, L_rL = 0, L_sL = 0, F_l = r.0, L_rW = 0, L_sW = F_w.0)
out <- ode(Time, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE))
State = out[dim(out)[1], 2:8]; State["L_sF"] = State["L_sF"]-0.001; State["L_rF"] = 0.001 # can just replace a suseptable louse with a resistant louse
Time_invade = seq(0, 5*n-62, length.out = 5*n-61)
out <- ode(Time_invade, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE))
Time_outs = seq(0, 61, length.out = 62) # simulate just last month
State = out[dim(out)[1], 2:8]
out <- ode(Time_outs, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE, maxroots = 500))
out_last_month <- as.data.frame(out)
resist_percent <- mean(out_last_month$L_rF/(out_last_month$L_rF + out_last_month$L_sF))
num_treats <- length(attributes(out)$troot)
farm_burd <- mean((out_last_month$L_rF + out_last_month$L_sF)/F_f.0)
link_pop <- mean(out_last_month$F_l)
list(resist_percent, link_pop, num_treats, farm_burd)
}}
# end parallel cluster
stopCluster(cl)
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.2*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 # ha
l_s.0 = 6.35; c_s.0 = 1/5
l_r.0 = l_s.0*0.95; c_r.0 = c_s.0 # similar to Murray values: l_s.0*0.98
u_s.0 = 1/60
u_r.0 = u_s.0 # Bateman et al modifies resistant lice here
m.0 = 0.0025 # to modify equilibrium values, basically the competition
mb.0 = 0.01 # 1?? 0.2?? m.0?
p_ff.0 = 0.9 # low-ish connectivity case (p_ff.0 close to 1)
p_ll.0 = p_ff.0 # lice in farm stay on farm...
p_fl.0 = 1-p_ff.0 # ...or jump to wild (spillover)
p_lf.0 = p_fl.0 # spillback rate
p_ww.0 = 1 # all lice in wild stay in that environment, movement to link environment via migration
B_f.0 = 5.9*10^-10/1.3 # all the lice attach type vibe -- very approximate
B_l.0 = B_f.0*0.75 # slightly lower in the link population -- bateman vibe
B_w.0 = B_f.0*0.25 # lowest in wild
Tr.0 = 10 # just to start
t_s.0 = 0.9 # 90% effective
t_r.0 = t_s.0*0.5 # resistant lice have 75% advantage
b.0 = 1000
th.0 = 0 # Murray/Bateman: continous treatment
h.0 = 0.67/365
F_f.0 = 6*10^6 # normalize farm fish population size --> might need to be closer to 2e6?? for about a single farm v. whole network
F_w.0 = 20*F_f.0
r.0 = 3*10^2
v.0 = 2*10^2
X.0 = 0.02
u_f.0 = 0 # no wild fish death
M_out.0 = 1/(0.25*365)
Y.0 = M_out.0
M_in.0 = 1/(1.25*365)
sig.0 = 1/(0.25*365)
pT.0 = 10
pQ.0 = 2
n = 365*5 # for daily pars --> 10 years
Time = seq(0, n, length.out = n+1)
approx_pars = c(l_s = l_s.0, c_s = c_s.0, l_r = l_r.0, c_r = c_r.0,
u_s = u_s.0, u_r = u_r.0, m = m.0, mb = mb.0,
p_ff = p_ff.0, p_ll = p_ll.0, p_fl = p_fl.0, p_lf = p_lf.0, p_ww = p_ww.0,
B_f = B_f.0, B_l = B_l.0, B_w = B_w.0,
t_r = t_r.0, t_s = t_s.0, th = th.0, h = h.0,
F_f = F_f.0, F_w = F_w.0,
r = r.0, v = v.0, X = X.0, Y = Y.0, u_f = u_f.0, sig = sig.0,
M_out = M_out.0, M_in = M_in.0)
# doing parallel
cl <- parallel::makeCluster(detectCores())
doParallel::registerDoParallel(cl)
# set up & make function
{tr.vec <- seq(from = 0.3, to = 0.9, length.out = 4) # treatment effect --> might be interesting to also do with wild fish to see how threshold & wild fish interact
th.vec <- seq(from = 0.01, to = 26.01, length.out = 14) # threshold
TR_TH <- expand.grid(treat_eff = tr.vec, thresh_val = th.vec)
# think about how to prep the foreach loop --> check how you did it in the evo rescue files?
approx_pars_out <- foreach(i=1:dim(TR_TH)[1], .packages="deSolve", .combine="rbind") %dopar% {
t_s.0 = TR_TH$treat_eff[i]
t_r.0 = t_s.0*0.5 # make 25% of t_s
Pars = approx_pars
Pars['t_s'] <- t_s.0; Pars['t_r'] <- t_r.0
th.0 = TR_TH$thresh_val[i]
# redefine root & event with correct threshold and effecitivity
rootfunc <- function(Time, y, Pars) {return (y[1] + y[2] - th.0*F_f.0)} # threshold hit
eventfunc <- function(Time, y, Pars) {
y[1] <- (1-t_r.0)*y[1]
y[2] <- (1-t_s.0)*y[2]
return(y)
} # at the root, do this event
State = c(L_rF = 0, L_sF = 0.0005*F_f.0, L_rL = 0, L_sL = 0, F_l = r.0, L_rW = 0, L_sW = F_w.0)
out <- ode(Time, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE))
State = out[dim(out)[1], 2:8]; State["L_sF"] = State["L_sF"]-0.001; State["L_rF"] = 0.001 # can just replace a suseptable louse with a resistant louse
Time_invade = seq(0, 5*n-62, length.out = 5*n-61)
out <- ode(Time_invade, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE))
Time_outs = seq(0, 61, length.out = 62) # simulate just last month
State = out[dim(out)[1], 2:8]
out <- ode(Time_outs, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE, maxroots = 500))
out_last_month <- as.data.frame(out)
resist_percent <- mean(out_last_month$L_rF/(out_last_month$L_rF + out_last_month$L_sF))
num_treats <- length(attributes(out)$troot)
farm_burd <- mean((out_last_month$L_rF + out_last_month$L_sF)/F_f.0)
link_pop <- mean(out_last_month$F_l)
list(resist_percent, link_pop, num_treats, farm_burd)
}}
# end parallel cluster
stopCluster(cl)
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.2*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 # has some more efficacy options
seq(from = 0.01, to = 27.01, length.out = 10)
cl <- parallel::makeCluster(detectCores())
doParallel::registerDoParallel(cl)
# set up & make function
{tr.vec <- seq(from = 0.3, to = 0.9, length.out = 4) # treatment effect --> might be interesting to also do with wild fish to see how threshold & wild fish interact
th.vec <- seq(from = 0.01, to = 27.01, length.out = 10) # threshold
TR_TH <- expand.grid(treat_eff = tr.vec, thresh_val = th.vec)
# think about how to prep the foreach loop --> check how you did it in the evo rescue files?
approx_pars_out <- foreach(i=1:dim(TR_TH)[1], .packages="deSolve", .combine="rbind") %dopar% {
t_s.0 = TR_TH$treat_eff[i]
t_r.0 = t_s.0*0.5 # make 25% of t_s
Pars = approx_pars
Pars['t_s'] <- t_s.0; Pars['t_r'] <- t_r.0
th.0 = TR_TH$thresh_val[i]
# redefine root & event with correct threshold and effecitivity
rootfunc <- function(Time, y, Pars) {return (y[1] + y[2] - th.0*F_f.0)} # threshold hit
eventfunc <- function(Time, y, Pars) {
y[1] <- (1-t_r.0)*y[1]
y[2] <- (1-t_s.0)*y[2]
return(y)
} # at the root, do this event
State = c(L_rF = 0, L_sF = 0.0005*F_f.0, L_rL = 0, L_sL = 0, F_l = r.0, L_rW = 0, L_sW = F_w.0)
out <- ode(Time, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE))
State = out[dim(out)[1], 2:8]; State["L_sF"] = State["L_sF"]-0.001; State["L_rF"] = 0.001 # can just replace a suseptable louse with a resistant louse
Time_invade = seq(0, 5*n-62, length.out = 5*n-61)
out <- ode(Time_invade, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE))
Time_outs = seq(0, 61, length.out = 62) # simulate just last month
State = out[dim(out)[1], 2:8]
out <- ode(Time_outs, y = State, func = systemTREAT, parms = Pars, rootfun = rootfunc, events = list(func = eventfunc, root = TRUE, maxroots = 500))
out_last_month <- as.data.frame(out)
resist_percent <- mean(out_last_month$L_rF/(out_last_month$L_rF + out_last_month$L_sF))
num_treats <- length(attributes(out)$troot)
farm_burd <- mean((out_last_month$L_rF + out_last_month$L_sF)/F_f.0)
link_pop <- mean(out_last_month$F_l)
list(resist_percent, link_pop, num_treats, farm_burd)
}}
# end parallel cluster
stopCluster(cl)
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.2*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 # has some more efficacy options
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.5*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 #
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.25*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 #
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.3*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 #
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.35*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 #
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.4*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 #
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.3*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 #
# manipulate dataframes
{
approx_out <- cbind(TR_TH, unlist(approx_pars_out[,1]),
unlist(approx_pars_out[,2]),
unlist(approx_pars_out[,3]),
unlist(approx_pars_out[,4]))
colnames(approx_out) <- c(colnames(TR_TH), "Proportion resistant", "Link population size", "num_treat", "burd_farm")
approx_out$`Economic losses` <- 1*approx_out$num_treat + 0.25*approx_out$burd_farm
approx_out$`Econ. losses (standardized)` <- approx_out$`Economic losses`/max(approx_out$`Economic losses`)
approx_out$`Link pop. size (standardized)` <- approx_out$`Link population size`/max(approx_out$`Link population size`)
approx_out_long <- pivot_longer(approx_out[, c(1:3, 8:9)], cols = 3:5, names_to = "output_type")
}
approx_outputs <- list(approx_pars, approx_out, approx_out_long)
save(approx_outputs, file = "simulated data/approx_outputs.Rdata")
# make figures
{fig7 <- ggplot(data = approx_out_long) +
geom_point(aes(thresh_val, value, col = as.factor(treat_eff)), size = 1.4) +
facet_wrap(~output_type, nrow=1, scale = "free_y") +
scale_color_viridis(discrete = T, direction = -1) +  theme_classic() +
theme(legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
strip.text = element_text(size = 7)) +
labs(x = "Treatment threshold", y = NULL, col = "Treatment efficacy")
}
fig7 #
png("plots/approx_params.png",height=80,width=170,res=400,units='mm')
print(fig7)
dev.off()
5*2.5
1.5*1.5
1/60
5.9/1.3
0.67/365
M_out.0
1/(0.25*365)
1/(0.25*365)
1/(1.25*365)
